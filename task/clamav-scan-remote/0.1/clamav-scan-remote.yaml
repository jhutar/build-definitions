apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "virus, konflux"
  labels:
    app.kubernetes.io/version: "0.1"
  name: clamav-scan-remote
spec:
  description: >-
    Scans the content of container images for viruses, malware, and other malicious content using ClamAV antivirus scanner.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
    - name: IMAGES_PROCESSED
      description: Images processed in the task.
  params:
    - name: image-digest
      description: Image digest to scan.
    - name: image-url
      description: Image URL.
    - name: docker-auth
      description: unused
      default: ""
    - description: The platform to build on
      name: PLATFORM
      type: string

  steps:
    - name: doit-all
      image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: /work
      # need to change user since 'oc image extract' requires more privileges when running as root
      # https://bugzilla.redhat.com/show_bug.cgi?id=1969929
      securityContext:
        runAsUser: 1000
      env:
        - name: HOME
          value: /work
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
      computeResources:
        limits:
          memory: 4Gi
        requests:
          memory: 512Mi
          cpu: 10m
      script: |-
        set -o verbose
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "IMAGE_DIGEST: $IMAGE_DIGEST"
        env | sort
        set -xeu
        mkdir -p ~/.ssh
        if [ -e "/ssh/error" ]; then
          #no server could be provisioned
          cat /ssh/error
          exit 1
        elif [ -e "/ssh/otp" ]; then
         curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
         echo "" >> ~/.ssh/id_rsa
        else
          cp /ssh/id_rsa ~/.ssh
        fi
        chmod 0400 ~/.ssh/id_rsa
        export SSH_HOST=$(cat /ssh/host)
        export BUILD_DIR=$(cat /ssh/user-dir)
        export SSH_ARGS="-o StrictHostKeyChecking=no"
        mkdir -p scripts
        echo "$BUILD_DIR"
        ssh $SSH_ARGS "$SSH_HOST" "bash -xc 'mkdir -p $BUILD_DIR/scripts $BUILD_DIR/work_dir/logs $BUILD_DIR/db_dir; chmod go+w $BUILD_DIR/work_dir $BUILD_DIR/work_dir/logs $BUILD_DIR/db_dir'"
        rsync -rlptD "/tekton/results/" "$SSH_HOST:$BUILD_DIR/tekton-results/"
        rsync -rlptD "$HOME/.docker/" "$SSH_HOST:$BUILD_DIR/.docker/"
        ls -alR $HOME   # DEBUG



        cat >scripts/script-database.sh <<'REMOTESSHEOF'
        #!/usr/bin/env bash
        clamscan --version
        cp -r /var/lib/clamav/* /tmp/clamdb
        REMOTESSHEOF



        cat >scripts/script-extract-and-scan-image.sh <<'REMOTESSHEOF'
        #!/usr/bin/env bash
        set -euo pipefail
        . /utils.sh
        trap 'handle_error' EXIT

        imagewithouttag=$(echo $IMAGE_URL | sed "s/\(.*\):.*/\1/" | tr -d '\n')

        # strip new-line escape symbol from parameter and save it to variable
        imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

        # check if image is attestation one, skip the clamav scan in such case
        if [[ $imageanddigest == *.att ]]
        then
            echo "$imageanddigest is an attestation image. Skipping ClamAV scan."
            exit 0
        fi

        images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'
        digests_processed=()
        mkdir logs
        mkdir content
        cd content
        echo "Extracting image(s)."

        # Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes
        image_manifests=$(get_image_manifests -i ${imageanddigest})
        if [ -n "$image_manifests" ]; then
          while read -r arch arch_sha; do
            destination=$(echo content-$arch)
            mkdir -p "$destination"
            arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)

            echo "Running \"oc image extract\" on image of arch $arch"
            oc image extract --registry-config ~/.docker/config.json $arch_imageanddigest --path="/:${destination}" --filter-by-os="linux/${arch}"
            if [ $? -ne 0 ]; then
              echo "Unable to extract image for arch $arch. Skipping ClamAV scan!"
              exit 0
            fi

            echo "Scanning image for arch $arch. This operation may take a while."
            clamscan $destination -ri --max-scansize=4095M --max-filesize=4095M \
              --max-scantime=0 --max-files=0 --max-recursion=1000 --max-dir-recursion=20000 --max-embeddedpe=4095M \
              --max-htmlnormalize=10M --max-htmlnotags=4095M --max-scriptnormalize=5M --max-ziptypercg=4095M \
              --max-partitions=50000 --max-iconspe=100000 --max-rechwp3=20000 --pcre-match-limit=100000000 --pcre-recmatch-limit=2000000 \
              --pcre-max-filesize=4095M --alert-exceeds-max=yes \
              --alert-encrypted=yes --alert-encrypted-archive=yes --alert-encrypted-doc=yes --alert-macros=yes \
              --alert-phishing-ssl=yes --alert-phishing-cloak=yes --alert-partition-intersection=yes \
              | tee /work/logs/clamscan-result-$arch.log || true
            echo "Executed-on: Scan was executed on version - $(clamscan --version)" | tee -a /work/logs/clamscan-result-$arch.log

            digests_processed+=("\"$arch_sha\"")

            if [[ -e "/work/logs/clamscan-result-$arch.log" ]]; then
              # file_suffix=$(basename "$file" | sed 's/clamscan-result-//;s/.log//')
              # OPA/EC requires structured data input, add clamAV log into json
              jq -Rs '{ output: . }' /work/logs/clamscan-result-$arch.log > /work/logs/clamscan-result-log-$arch.json

              EC_EXPERIMENTAL=1 ec test \
                --namespace required_checks \
                --policy /project/clamav/virus-check.rego \
                -o json \
                /work/logs/clamscan-result-log-$arch.json || true

              # workaround: due to a bug in ec-cli, we cannot generate json and appstudio output at the same time, running it again
              EC_EXPERIMENTAL=1 ec test \
                --namespace required_checks \
                --policy /project/clamav/virus-check.rego \
                -o appstudio \
                /work/logs/clamscan-result-log-$arch.json | tee /work/logs/clamscan-ec-test-$arch.json || true

              cat /work/logs/clamscan-ec-test-$arch.json
            fi
          done < <(echo "$image_manifests" | jq -r 'to_entries[] | "\(.key) \(.value)"')
        fi

        jq -s -rce '
          reduce .[] as $item ({"timestamp":"0","namespace":"","successes":0,"failures":0,"warnings":0,"result":"","note":""};
            {
            "timestamp" : (if .timestamp < $item.timestamp then $item.timestamp else .timestamp end),
            "namespace" : $item.namespace,
            "successes" : (.successes + $item.successes),
            "failures" : (.failures + $item.failures),
            "warnings" : (.warnings + $item.warnings),
            "result" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.result else .result end),
            "note" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.note else .note end)
            })' /work/logs/clamscan-ec-test-*.json | tee $(results.TEST_OUTPUT.path)

        digests_processed_string=$(IFS=,; echo "${digests_processed[*]}")
        echo "${images_processed_template/\[%s]/[$digests_processed_string]}" | tee $(results.IMAGES_PROCESSED.path)
        REMOTESSHEOF



        cat >scripts/script-upload.sh <<'REMOTESSHEOF'
        #!/usr/bin/env bash

        cd logs

        for UPLOAD_FILE in $(find . -name "clamscan-result*.log"); do
          MEDIA_TYPE=text/vnd.clamav
          args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
        done
        for UPLOAD_FILE in $(find . -name "clamscan-ec-test*.json"); do
          MEDIA_TYPE=application/vnd.konflux.test_output+json
          args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
        done

        if [ -z "${args}" ]; then
          echo "No files found. Skipping upload."
          exit 0;
        fi

        echo "Selecting auth"
        select-oci-auth $IMAGE_URL > $HOME/auth.json
        echo "Attaching to ${IMAGE_URL} via the OCI 1.1 Referrers API"
        oras attach --no-tty --registry-config "$HOME/auth.json" --distribution-spec v1.1-referrers-api --artifact-type application/vnd.clamav "${IMAGE_URL}" "${args[@]}"
        echo "Attaching to ${IMAGE_URL} via the OCI 1.1 Referrers Tag"
        oras attach --no-tty --registry-config "$HOME/auth.json" --distribution-spec v1.1-referrers-tag --artifact-type application/vnd.clamav "${IMAGE_URL}" "${args[@]}"
        REMOTESSHEOF



        chmod +x scripts/script-*.sh
        rsync -rlptD scripts "$SSH_HOST:$BUILD_DIR"

        # Populate ClamAV virus database
        ssh $SSH_ARGS "$SSH_HOST" podman run \
          --rm -ti \
          -v "$BUILD_DIR/db_dir:/tmp/clamdb:Z,rw" \
          -v "$BUILD_DIR/scripts:/scripts:Z,ro" \
          --entrypoint "/bin/bash" \
          quay.io/redhat-appstudio/clamav-db:v1 \
          scripts/script-database.sh

        # Extrack image content and run the scan
        ssh $SSH_ARGS "$SSH_HOST" podman run \
          -e IMAGE_URL="$IMAGE_URL" \
          -e IMAGE_DIGEST="$IMAGE_DIGEST" \
          -v "$BUILD_DIR/work_dir:/work:Z,rw" \
          -v "$BUILD_DIR/.docker/:/root/.docker:Z" \
          -v "$BUILD_DIR/db_dir:/var/lib/clamav:Z,rw" \
          -v "$BUILD_DIR/tekton-results/:/tekton/results:Z" \
          -v "$BUILD_DIR/scripts:/scripts:Z" \
          quay.io/redhat-appstudio/konflux-test:v1.4.5@sha256:801a105ba0f9c7f58f5ba5cde1a3b4404009fbebb1028779ca2c5de211e94940 \
          /scripts/script-extract-and-scan-image.sh

        # Upload artifacts
        ssh $SSH_ARGS "$SSH_HOST" podman run \
          -e IMAGE_URL="$IMAGE_URL" \
          -e IMAGE_DIGEST="$IMAGE_DIGEST" \
          -v "$BUILD_DIR/work_dir:/work:Z,rw" \
          -v "$BUILD_DIR/.docker/:/root/.docker:Z" \
          -v "$BUILD_DIR/db_dir:/var/lib/clamav:Z,rw" \
          -v "$BUILD_DIR/tekton-results/:/tekton/results:Z" \
          -v "$BUILD_DIR/scripts:/scripts:Z" \
          --workdir /work \
          --entrypoint "/bin/bash" \
          quay.io/konflux-ci/oras:latest@sha256:1619b84cea3777387f643d7a1ecde98dd10904439f31607e66530cd2299c7b91 \
          /scripts/script-upload.sh

        rsync -rlptD "$SSH_HOST:$BUILD_DIR/tekton-results/" "/tekton/results/"
      volumeMounts:
        ###- mountPath: /var/lib/clamav
        ###  name: dbfolder
        - mountPath: /work
          name: work
        - mountPath: /ssh
          name: ssh
          readOnly: true

    ###- name: upload
    ###  image: quay.io/konflux-ci/oras:latest@sha256:1619b84cea3777387f643d7a1ecde98dd10904439f31607e66530cd2299c7b91
    ###  env:
    ###    - name: IMAGE_URL
    ###      value: $(params.image-url)
    ###    - name: IMAGE_DIGEST
    ###      value: $(params.image-digest)
    ###  workingDir: /work
    ###  script: |
    ###    #!/usr/bin/env bash

    ###    cd logs

    ###    for UPLOAD_FILE in $(find . -name "clamscan-result*.log"); do
    ###      MEDIA_TYPE=text/vnd.clamav
    ###      args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
    ###    done
    ###    for UPLOAD_FILE in $(find . -name "clamscan-ec-test*.json"); do
    ###      MEDIA_TYPE=application/vnd.konflux.test_output+json
    ###      args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
    ###    done

    ###    if [ -z "${args}" ]; then
    ###      echo "No files found. Skipping upload."
    ###      exit 0;
    ###    fi

    ###    echo "Selecting auth"
    ###    select-oci-auth $IMAGE_URL > $HOME/auth.json
    ###    echo "Attaching to ${IMAGE_URL} via the OCI 1.1 Referrers API"
    ###    oras attach --no-tty --registry-config "$HOME/auth.json" --distribution-spec v1.1-referrers-api --artifact-type application/vnd.clamav "${IMAGE_URL}" "${args[@]}"
    ###    echo "Attaching to ${IMAGE_URL} via the OCI 1.1 Referrers Tag"
    ###    oras attach --no-tty --registry-config "$HOME/auth.json" --distribution-spec v1.1-referrers-tag --artifact-type application/vnd.clamav "${IMAGE_URL}" "${args[@]}"
    ###  volumeMounts:
    ###    - mountPath: /work
    ###      name: work

  # sidecar is rebuilt daily(is meant to be updated daily), hence the usage of the tag instead of digest
  # provides latest virus database for clamscan only
  # does not execute anything
  ###sidecars:
  ###  - image: quay.io/redhat-appstudio/clamav-db:v1  # explicit floating tag, daily updates, per arch call this is exempt for now for use of image digest
  ###    imagePullPolicy: Always
  ###    name: database
  ###    script: |
  ###      #!/usr/bin/env bash
  ###      clamscan --version
  ###      cp -r /var/lib/clamav/* /tmp/clamdb
  ###    volumeMounts:
  ###      - mountPath: /tmp/clamdb
  ###        name: dbfolder
  volumes:
    ###- name: dbfolder
    ###  emptyDir: {}
    - name: work
      emptyDir: {}
    - name: ssh
      secret:
        optional: false
        secretName: multi-platform-ssh-$(context.taskRun.name)
